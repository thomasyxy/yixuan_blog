{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":0,"renderable":1}],"Cache":[{"_id":"themes/apollo/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1475979462000},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1475979462000},{"_id":"themes/apollo/README.md","hash":"fb6fbe42172a35cbdaa540a777cc4bc02add2278","modified":1475979462000},{"_id":"themes/apollo/_config.yml","hash":"0a457e5b5bf045d50b7dd793b49be7376f1a7f13","modified":1475979462000},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1475979462000},{"_id":"themes/apollo/package.json","hash":"4d13f5f859db7d008f49251543a8f610b2ecabd5","modified":1475979462000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1475979186000},{"_id":"themes/apollo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1475979462000},{"_id":"themes/apollo/.git/config","hash":"e8486e77527181934f2dda23e50b879ab7641244","modified":1475979462000},{"_id":"themes/apollo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1475979396000},{"_id":"themes/apollo/.git/index","hash":"fe26f43755e1505ca8e83a61192cedb7d0ca7851","modified":1475979462000},{"_id":"themes/apollo/.git/packed-refs","hash":"4fc39910ab84670caa2bbac43c723fe55f826a56","modified":1475979462000},{"_id":"themes/apollo/doc/doc-en.md","hash":"d6d9756b2085cdd8ee51eb5594427e2abf170e94","modified":1475979462000},{"_id":"themes/apollo/doc/doc-zh.md","hash":"d43c1f6bff66426744a2c6f031d19ff09cdeb2d1","modified":1475979462000},{"_id":"themes/apollo/languages/en.yml","hash":"40292f2a48e4e6361132033a47c516cb33127b6c","modified":1475979462000},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"9e4b03e14c094000257ea254fd660dde4c7af63c","modified":1475979462000},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1475979462000},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1475979462000},{"_id":"themes/apollo/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1475979462000},{"_id":"themes/apollo/source/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1475979462000},{"_id":"themes/apollo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1475979396000},{"_id":"themes/apollo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1475979396000},{"_id":"themes/apollo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1475979396000},{"_id":"themes/apollo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1475979396000},{"_id":"themes/apollo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1475979396000},{"_id":"themes/apollo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1475979396000},{"_id":"themes/apollo/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1475979396000},{"_id":"themes/apollo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1475979396000},{"_id":"themes/apollo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1475979396000},{"_id":"themes/apollo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1475979396000},{"_id":"themes/apollo/.git/logs/HEAD","hash":"778fa469ecc5fb99bf2643b1a446ea37fc939e02","modified":1475979462000},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1475979462000},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"cd9447e9b0ad22213e6a17d9a9b948f9f998f921","modified":1475979462000},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1475979462000},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"217f8b17054e5079f2d30bb7e2e4e36c0f2161b7","modified":1475979462000},{"_id":"themes/apollo/layout/partial/head.jade","hash":"d062dafabfe65198e5cf2ddb0e47d909885aa950","modified":1475979462000},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"cf3339de8979b5f75a3011f0f6b5451091b77dc8","modified":1475979462000},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"eb15573ff66bdbb110ac77cf360b740170cee738","modified":1475979462000},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"c35d3061da4b053b73150d9741c542d660798270","modified":1475979462000},{"_id":"themes/apollo/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1475979462000},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1475979462000},{"_id":"themes/apollo/source/css/apollo.css","hash":"805612fea3f0768dc705058f4b9b8bc95abe4ed4","modified":1475979462000},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"153bbf882c1f6f65bb4510999b51812e20016ca7","modified":1475979462000},{"_id":"themes/apollo/.git/objects/pack/pack-a07063e21a576d638704bd85825c5a6b6664d7e6.idx","hash":"4e2c36ca9273883f82e5a32004d6f1d451de755b","modified":1475979462000},{"_id":"themes/apollo/.git/refs/heads/master","hash":"8c97ee1a545a01cdb2d3369c503290a2784d611d","modified":1475979462000},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"d2f740a7d48349b7536777c795f82ab740836d0f","modified":1475979462000},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"ae967b2049ecb9b8c4e139ecce32fd9fb5358ac5","modified":1475979462000},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1475979462000},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1475979462000},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"153bde88bf8ffeae4ffd813d8cc694dd83d33d94","modified":1475979462000},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"6b5c59f3d2295944f934aee2c1156012a3306d5d","modified":1475979462000},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"b5eb0fb35fb275cbb6452b5d98702d461af3e6d5","modified":1475979462000},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1475979462000},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"912776a0eb7ad5a387b9aa929c857b6edd0c113e","modified":1475979462000},{"_id":"themes/apollo/.git/logs/refs/heads/master","hash":"778fa469ecc5fb99bf2643b1a446ea37fc939e02","modified":1475979462000},{"_id":"themes/apollo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1475979462000},{"_id":"themes/apollo/.git/logs/refs/remotes/origin/HEAD","hash":"778fa469ecc5fb99bf2643b1a446ea37fc939e02","modified":1475979462000},{"_id":"themes/apollo/.git/objects/pack/pack-a07063e21a576d638704bd85825c5a6b6664d7e6.pack","hash":"9d815b56016ebeea49a10d58eca976b8c9e3ec0e","modified":1475979462000},{"_id":"source/.DS_Store","hash":"73aea043f6d78500c05795c798d6385684852105","modified":1475994630000},{"_id":"source/_posts/测试文章.md","hash":"5b78819a3ad40a00f2134212092e51aa51027167","modified":1475995221000},{"_id":"source/_posts/.DS_Store","hash":"cad5f4eea48b852401d7147b62b182772118fa35","modified":1476344045000},{"_id":"source/_posts/vue数据绑定.md","hash":"ac02db02de5036b5e3bdbbd0c42df0a7d645c013","modified":1476344507000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-10-09T02:13:06.000Z","updated":"2016-10-13T07:37:27.000Z","_id":"ciu203rrp0000rtu2wc4e9o6d","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"_content":"# 测试文章\n\n```\nfs.readdirSync(__dirname)\n  .filter(function(file) {\n    return (file.indexOf(\".\") !== 0) && (file !== \"index.js\");\n  })\n  .forEach(function(file) {\n    var model = require(path.join(__dirname, file));\n    ctrl[path.basename(file, '.js')] = model;\n  });\n```\n`module.exports = ctrl;`\n1. sadsadas\n2. 2312\n3. 3sda\n\n* sajdjka\n* sdqi\n* cfde\n\n\n\n","source":"_posts/测试文章.md","raw":"# 测试文章\n\n```\nfs.readdirSync(__dirname)\n  .filter(function(file) {\n    return (file.indexOf(\".\") !== 0) && (file !== \"index.js\");\n  })\n  .forEach(function(file) {\n    var model = require(path.join(__dirname, file));\n    ctrl[path.basename(file, '.js')] = model;\n  });\n```\n`module.exports = ctrl;`\n1. sadsadas\n2. 2312\n3. 3sda\n\n* sajdjka\n* sdqi\n* cfde\n\n\n\n","slug":"测试文章","published":1,"date":"2016-10-08T06:06:44.000Z","updated":"2016-10-09T06:40:21.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu29imud000088u2uf0dx7ch","content":"<h1 id=\"测试文章\"><a href=\"#测试文章\" class=\"headerlink\" title=\"测试文章\"></a>测试文章</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs.readdirSync(__dirname)</div><div class=\"line\">  .filter(function(file) &#123;</div><div class=\"line\">    return (file.indexOf(&quot;.&quot;) !== 0) &amp;&amp; (file !== &quot;index.js&quot;);</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .forEach(function(file) &#123;</div><div class=\"line\">    var model = require(path.join(__dirname, file));</div><div class=\"line\">    ctrl[path.basename(file, &apos;.js&apos;)] = model;</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<p><code>module.exports = ctrl;</code></p>\n<ol>\n<li>sadsadas</li>\n<li>2312</li>\n<li>3sda</li>\n</ol>\n<ul>\n<li>sajdjka</li>\n<li>sdqi</li>\n<li>cfde</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"测试文章\"><a href=\"#测试文章\" class=\"headerlink\" title=\"测试文章\"></a>测试文章</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs.readdirSync(__dirname)</div><div class=\"line\">  .filter(function(file) &#123;</div><div class=\"line\">    return (file.indexOf(&quot;.&quot;) !== 0) &amp;&amp; (file !== &quot;index.js&quot;);</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .forEach(function(file) &#123;</div><div class=\"line\">    var model = require(path.join(__dirname, file));</div><div class=\"line\">    ctrl[path.basename(file, &apos;.js&apos;)] = model;</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<p><code>module.exports = ctrl;</code></p>\n<ol>\n<li>sadsadas</li>\n<li>2312</li>\n<li>3sda</li>\n</ol>\n<ul>\n<li>sajdjka</li>\n<li>sdqi</li>\n<li>cfde</li>\n</ul>\n"},{"_content":"# vue 数据绑定\n\n### 插值\n\nMustache 标签会被相应数据对象的 msg 属性的值替换。每当这个属性变化时它也会更新。\n\n```\n<div>文本插值是最基本的形式使用双大括号:{{num}}</div>\n```\n\n有时候只需要渲染一次数据，后续数据的变化不再关心，可以只处理单次插值，今后的数据变化就不会再引起插值更新了。\n\n```\n<div>在变量前加*只处理一次，之后不会再更新: {{*num}}</div>\n```\n\n双 Mustache 标签将数据解析为纯文本而不是 HTML。为了输出真的 HTML 字符串，需要用三 Mustache 标签：\n\n```\n<div>此处插入了一段html代码: {{{ raw_html }}}</div>\n```\n\nMustache 标签也可以用在 HTML 特性 (Attributes) 内：\n\n```\n<div id=\"item-{{ id }}\"></div>\n```\n\n### 表达式\n\nVue.js 在数据绑定内支持全功能的 JavaScript 表达式,允许在表达式后添加可选的“过滤器 (Filter) ”，类似于Linux中的管道，以“管道符”指示：\n\n```html\n<div>{{*(num+1)}}</div>\n<div>{{false ? 'YES' : 'NO'}}</div>\n<div>{{message.split(',')}}</div>\n<div>{{ message.split('').reverse().join('') | uppercase}}</div>\n```\n\n### 分隔符\n\nvue.js中数据绑定语法被设计为可配置的。如果不习惯Mustache风格的语法可以自定义。\n\n源码如下：\n\n``` javascript\nvar delimiters = ['{{', '}}'];\nvar unsafeDelimiters = ['{{{', '}}}'];\n\nvar config = Object.defineProperties({\n  ......\n},{\n    delimiters: { /**\n                   * Interpolation delimiters. Changing these would trigger\n                   * the text parser to re-compile the regular expressions.\n                   *\n                   * @type {Array<String>}\n                   */\n\n      get: function get() {\n        return delimiters;\n      },\n      set: function set(val) {\n        delimiters = val;\n        compileRegex();\n      },\n      configurable: true,\n      enumerable: true\n    },\n    unsafeDelimiters: {\n      get: function get() {\n        return unsafeDelimiters;\n      },\n      set: function set(val) {\n        unsafeDelimiters = val;\n        compileRegex();\n      },\n      configurable: true,\n      enumerable: true\n    }\n  });\n```\n\n自定义分隔符：\n\n\n```javascript\n//文本插值的语法由{{ message }}改为{% message %}\nVue.config.delimiters = [\"{%\", \"%}\"];\n\n//HTML插值的语法由{{{ html }}}改为{{% html %}}\nVue.config.unsafeDelimiters = [\"{{%\", \"%}}\"];\n```\n\n> 注意，在2.0版本中：\n> ~~Vue.config.delimiters~~ 由全局配置被改动为一个组件级别的配置。\n> ~~Vue.config.unsafeDelimiters~~ 也被废弃，用v-html代替。\n\n\n\n\n","source":"_posts/vue数据绑定.md","raw":"# vue 数据绑定\n\n### 插值\n\nMustache 标签会被相应数据对象的 msg 属性的值替换。每当这个属性变化时它也会更新。\n\n```\n<div>文本插值是最基本的形式使用双大括号:{{num}}</div>\n```\n\n有时候只需要渲染一次数据，后续数据的变化不再关心，可以只处理单次插值，今后的数据变化就不会再引起插值更新了。\n\n```\n<div>在变量前加*只处理一次，之后不会再更新: {{*num}}</div>\n```\n\n双 Mustache 标签将数据解析为纯文本而不是 HTML。为了输出真的 HTML 字符串，需要用三 Mustache 标签：\n\n```\n<div>此处插入了一段html代码: {{{ raw_html }}}</div>\n```\n\nMustache 标签也可以用在 HTML 特性 (Attributes) 内：\n\n```\n<div id=\"item-{{ id }}\"></div>\n```\n\n### 表达式\n\nVue.js 在数据绑定内支持全功能的 JavaScript 表达式,允许在表达式后添加可选的“过滤器 (Filter) ”，类似于Linux中的管道，以“管道符”指示：\n\n```html\n<div>{{*(num+1)}}</div>\n<div>{{false ? 'YES' : 'NO'}}</div>\n<div>{{message.split(',')}}</div>\n<div>{{ message.split('').reverse().join('') | uppercase}}</div>\n```\n\n### 分隔符\n\nvue.js中数据绑定语法被设计为可配置的。如果不习惯Mustache风格的语法可以自定义。\n\n源码如下：\n\n``` javascript\nvar delimiters = ['{{', '}}'];\nvar unsafeDelimiters = ['{{{', '}}}'];\n\nvar config = Object.defineProperties({\n  ......\n},{\n    delimiters: { /**\n                   * Interpolation delimiters. Changing these would trigger\n                   * the text parser to re-compile the regular expressions.\n                   *\n                   * @type {Array<String>}\n                   */\n\n      get: function get() {\n        return delimiters;\n      },\n      set: function set(val) {\n        delimiters = val;\n        compileRegex();\n      },\n      configurable: true,\n      enumerable: true\n    },\n    unsafeDelimiters: {\n      get: function get() {\n        return unsafeDelimiters;\n      },\n      set: function set(val) {\n        unsafeDelimiters = val;\n        compileRegex();\n      },\n      configurable: true,\n      enumerable: true\n    }\n  });\n```\n\n自定义分隔符：\n\n\n```javascript\n//文本插值的语法由{{ message }}改为{% message %}\nVue.config.delimiters = [\"{%\", \"%}\"];\n\n//HTML插值的语法由{{{ html }}}改为{{% html %}}\nVue.config.unsafeDelimiters = [\"{{%\", \"%}}\"];\n```\n\n> 注意，在2.0版本中：\n> ~~Vue.config.delimiters~~ 由全局配置被改动为一个组件级别的配置。\n> ~~Vue.config.unsafeDelimiters~~ 也被废弃，用v-html代替。\n\n\n\n\n","slug":"vue数据绑定","published":1,"date":"2016-10-13T03:32:43.000Z","updated":"2016-10-13T07:41:47.000Z","_id":"ciu80stfq00021hu26kc71jvy","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"vue-数据绑定\"><a href=\"#vue-数据绑定\" class=\"headerlink\" title=\"vue 数据绑定\"></a>vue 数据绑定</h1><h3 id=\"插值\"><a href=\"#插值\" class=\"headerlink\" title=\"插值\"></a>插值</h3><p>Mustache 标签会被相应数据对象的 msg 属性的值替换。每当这个属性变化时它也会更新。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;文本插值是最基本的形式使用双大括号:&#123;&#123;num&#125;&#125;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>有时候只需要渲染一次数据，后续数据的变化不再关心，可以只处理单次插值，今后的数据变化就不会再引起插值更新了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;在变量前加*只处理一次，之后不会再更新: &#123;&#123;*num&#125;&#125;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>双 Mustache 标签将数据解析为纯文本而不是 HTML。为了输出真的 HTML 字符串，需要用三 Mustache 标签：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;此处插入了一段html代码: &#123;&#123;&#123; raw_html &#125;&#125;&#125;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>Mustache 标签也可以用在 HTML 特性 (Attributes) 内：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;item-&#123;&#123; id &#125;&#125;&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h3><p>Vue.js 在数据绑定内支持全功能的 JavaScript 表达式,允许在表达式后添加可选的“过滤器 (Filter) ”，类似于Linux中的管道，以“管道符”指示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;*(num+1)&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;false ? 'YES' : 'NO'&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;message.split(',')&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; message.split('').reverse().join('') | uppercase&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"分隔符\"><a href=\"#分隔符\" class=\"headerlink\" title=\"分隔符\"></a>分隔符</h3><p>vue.js中数据绑定语法被设计为可配置的。如果不习惯Mustache风格的语法可以自定义。</p>\n<p>源码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> delimiters = [<span class=\"string\">'&#123;&#123;'</span>, <span class=\"string\">'&#125;&#125;'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> unsafeDelimiters = [<span class=\"string\">'&#123;&#123;&#123;'</span>, <span class=\"string\">'&#125;&#125;&#125;'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">Object</span>.defineProperties(&#123;</div><div class=\"line\">  ......</div><div class=\"line\">&#125;,&#123;</div><div class=\"line\">    <span class=\"attr\">delimiters</span>: &#123; <span class=\"comment\">/**</span></div><div class=\"line\">                   * Interpolation delimiters. Changing these would trigger</div><div class=\"line\">                   * the text parser to re-compile the regular expressions.</div><div class=\"line\">                   *</div><div class=\"line\">                   * @type &#123;Array&lt;String&gt;&#125;</div><div class=\"line\">                   */</div><div class=\"line\"></div><div class=\"line\">      get: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> delimiters;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set</span>(<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">        delimiters = val;</div><div class=\"line\">        compileRegex();</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">      <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">unsafeDelimiters</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> unsafeDelimiters;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set</span>(<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">        unsafeDelimiters = val;</div><div class=\"line\">        compileRegex();</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">      <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<p>自定义分隔符：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//文本插值的语法由&#123;&#123; message &#125;&#125;改为&#123;% message %&#125;</span></div><div class=\"line\">Vue.config.delimiters = [<span class=\"string\">\"&#123;%\"</span>, <span class=\"string\">\"%&#125;\"</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//HTML插值的语法由&#123;&#123;&#123; html &#125;&#125;&#125;改为&#123;&#123;% html %&#125;&#125;</span></div><div class=\"line\">Vue.config.unsafeDelimiters = [<span class=\"string\">\"&#123;&#123;%\"</span>, <span class=\"string\">\"%&#125;&#125;\"</span>];</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，在2.0版本中：<br><del>Vue.config.delimiters</del> 由全局配置被改动为一个组件级别的配置。<br><del>Vue.config.unsafeDelimiters</del> 也被废弃，用v-html代替。</p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"vue-数据绑定\"><a href=\"#vue-数据绑定\" class=\"headerlink\" title=\"vue 数据绑定\"></a>vue 数据绑定</h1><h3 id=\"插值\"><a href=\"#插值\" class=\"headerlink\" title=\"插值\"></a>插值</h3><p>Mustache 标签会被相应数据对象的 msg 属性的值替换。每当这个属性变化时它也会更新。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;文本插值是最基本的形式使用双大括号:&#123;&#123;num&#125;&#125;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>有时候只需要渲染一次数据，后续数据的变化不再关心，可以只处理单次插值，今后的数据变化就不会再引起插值更新了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;在变量前加*只处理一次，之后不会再更新: &#123;&#123;*num&#125;&#125;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>双 Mustache 标签将数据解析为纯文本而不是 HTML。为了输出真的 HTML 字符串，需要用三 Mustache 标签：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;此处插入了一段html代码: &#123;&#123;&#123; raw_html &#125;&#125;&#125;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>Mustache 标签也可以用在 HTML 特性 (Attributes) 内：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;item-&#123;&#123; id &#125;&#125;&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h3><p>Vue.js 在数据绑定内支持全功能的 JavaScript 表达式,允许在表达式后添加可选的“过滤器 (Filter) ”，类似于Linux中的管道，以“管道符”指示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;*(num+1)&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;false ? 'YES' : 'NO'&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;message.split(',')&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; message.split('').reverse().join('') | uppercase&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"分隔符\"><a href=\"#分隔符\" class=\"headerlink\" title=\"分隔符\"></a>分隔符</h3><p>vue.js中数据绑定语法被设计为可配置的。如果不习惯Mustache风格的语法可以自定义。</p>\n<p>源码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> delimiters = [<span class=\"string\">'&#123;&#123;'</span>, <span class=\"string\">'&#125;&#125;'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> unsafeDelimiters = [<span class=\"string\">'&#123;&#123;&#123;'</span>, <span class=\"string\">'&#125;&#125;&#125;'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">Object</span>.defineProperties(&#123;</div><div class=\"line\">  ......</div><div class=\"line\">&#125;,&#123;</div><div class=\"line\">    <span class=\"attr\">delimiters</span>: &#123; <span class=\"comment\">/**</div><div class=\"line\">                   * Interpolation delimiters. Changing these would trigger</div><div class=\"line\">                   * the text parser to re-compile the regular expressions.</div><div class=\"line\">                   *</div><div class=\"line\">                   * @type &#123;Array&lt;String&gt;&#125;</div><div class=\"line\">                   */</span></div><div class=\"line\"></div><div class=\"line\">      get: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> delimiters;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set</span>(<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">        delimiters = val;</div><div class=\"line\">        compileRegex();</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">      <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">unsafeDelimiters</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> unsafeDelimiters;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set</span>(<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">        unsafeDelimiters = val;</div><div class=\"line\">        compileRegex();</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">      <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<p>自定义分隔符：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//文本插值的语法由&#123;&#123; message &#125;&#125;改为&#123;% message %&#125;</span></div><div class=\"line\">Vue.config.delimiters = [<span class=\"string\">\"&#123;%\"</span>, <span class=\"string\">\"%&#125;\"</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//HTML插值的语法由&#123;&#123;&#123; html &#125;&#125;&#125;改为&#123;&#123;% html %&#125;&#125;</span></div><div class=\"line\">Vue.config.unsafeDelimiters = [<span class=\"string\">\"&#123;&#123;%\"</span>, <span class=\"string\">\"%&#125;&#125;\"</span>];</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，在2.0版本中：<br><del>Vue.config.delimiters</del> 由全局配置被改动为一个组件级别的配置。<br><del>Vue.config.unsafeDelimiters</del> 也被废弃，用v-html代替。</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}